Longest Alphabetical Substring

class LongestAlphabeticSubstring {
    public static void main(String[] args) {
        String str="abcb";
        char[] s=str.toCharArray();
        int count=1;
        for(int i=0;i<s.length;i++){
            if(s[i]+1==s[i+1]){
                count++;
            }else{
                break;
            }
        }
        System.out.println(count);
        
    }
}

Running Sum of 1d Array

Input: nums = [1,2,3,4]
Output: [1,3,6,10]
Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].

class RunningSum {
    public int[] runningSum(int[] nums) {
       int[] result =new int[nums.length] ;
        result[0]=nums[0];
       for(int i=1;i<nums.length;i++){
           result[i]=result[i-1]+nums[i];
       }
        return result;
    }
}

 Subsets
 Input: nums = [1,2,3]
 Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
 
 class Subset {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> output=new ArrayList();
        output.add(new ArrayList<Integer>());
        
        for(int num:nums){
            List<List<Integer>> newsubset = new ArrayList();
            for(List<Integer> curr: output){
                newsubset.add(new ArrayList<Integer>(curr){{add(num);}});
            }
            for(List<Integer> curr:newsubset){
                output.add(curr);
            }
            
        }
        return output;
    }
}
